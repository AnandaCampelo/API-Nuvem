{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Projeto de API RESTful com FastAPI","text":""},{"location":"#descricao-do-projeto","title":"Descri\u00e7\u00e3o do Projeto","text":"<p>Este projeto \u00e9 uma API RESTful desenvolvida com FastAPI para realizar o cadastro e autentica\u00e7\u00e3o de usu\u00e1rios e consultar dados meteorol\u00f3gicos da API OpenWeatherMap. A aplica\u00e7\u00e3o \u00e9 composta por diversas funcionalidades, incluindo registro de usu\u00e1rios, autentica\u00e7\u00e3o via JWT (JSON Web Token), e consulta de previs\u00f5es do tempo.</p>"},{"location":"#funcionalidades-implementadas","title":"Funcionalidades Implementadas","text":"<p>1. Registro de Usu\u00e1rios:</p> <ul> <li>Endpoint: <code>POST /registrar</code></li> <li>Recebe dados do usu\u00e1rio (nome, email, senha).</li> <li>Verifica se o email j\u00e1 est\u00e1 registrado.</li> <li>Hash da senha utilizando bcrypt.</li> <li>Armazena o novo usu\u00e1rio no banco de dados e retorna um token JWT.</li> </ul> <p>2. Autentica\u00e7\u00e3o de Usu\u00e1rios:</p> <ul> <li>Endpoint: <code>POST /login</code></li> <li>Recebe email e senha do usu\u00e1rio.</li> <li>Verifica as credenciais e autentica o usu\u00e1rio.</li> <li>Retorna um token JWT para acesso autorizado.</li> </ul> <p>3. Consulta de Previs\u00e3o do Tempo:</p> <ul> <li>Endpoint: <code>GET /consultar</code></li> <li>Requer um token JWT v\u00e1lido.</li> <li>Faz uma requisi\u00e7\u00e3o \u00e0 API OpenWeatherMap utilizando as coordenadas especificadas.</li> <li>Formata e retorna os dados da previs\u00e3o do tempo em um formato amig\u00e1vel.</li> </ul>"},{"location":"#estrutura-do-codigo","title":"Estrutura do C\u00f3digo","text":"<p>1. Importa\u00e7\u00f5es e Configura\u00e7\u00f5es:</p> <ul> <li>Carrega vari\u00e1veis de ambiente (chave secreta, URL do banco de dados, chave da API do OpenWeatherMap).</li> <li>Configura a conex\u00e3o com o banco de dados usando SQLAlchemy.</li> </ul> <p>2. Defini\u00e7\u00f5es de Modelos:</p> <ul> <li><code>User</code>: Modelo Pydantic para valida\u00e7\u00e3o de dados de entrada de usu\u00e1rios.</li> <li><code>Login</code>: Modelo Pydantic para valida\u00e7\u00e3o de dados de login.</li> <li><code>UserDB</code>: Modelo SQLAlchemy para representar a tabela de usu\u00e1rios no banco de dados.</li> </ul> <p>3. Fun\u00e7\u00f5es de Utilidade:</p> <ul> <li><code>create_token</code>: Cria um token JWT com dados do usu\u00e1rio e um tempo de expira\u00e7\u00e3o.</li> <li><code>verify_token</code>: Verifica e decodifica um token JWT.</li> <li><code>get_db</code>: Gerencia a sess\u00e3o do banco de dados.</li> </ul> <p>4. Endpoints da API:</p> <ul> <li><code>registrar</code>: Registra um novo usu\u00e1rio.</li> <li><code>login</code>: Autentica um usu\u00e1rio existente.</li> <li><code>consultar</code>: Consulta a previs\u00e3o do tempo ap\u00f3s verificar o token JWT.</li> </ul>"},{"location":"#como-executar-a-aplicacao","title":"Como Executar a Aplica\u00e7\u00e3o","text":"<p>1. Pr\u00e9-requisitos:</p> <ul> <li>Docker</li> </ul> <p>2. Configura\u00e7\u00e3o:</p> <ul> <li>Crie um arquivo <code>.env</code> na raiz do projeto e defina as seguintes vari\u00e1veis:     <code>dotenv     SECRET_KEY=sua_senha     DATABASE_URL=postgresql://user:password@db/dbname     OPENWEATHERMAP_API_KEY=sua_chave_api_openweathermap     POSTGRES_USER=user     POSTGRES_PASSWORD=password     POSTGRES_DB=dbname</code></li> </ul> <p>3. Execute a aplica\u00e7\u00e3o com Docker Compose:</p> <pre><code>    docker compose up -d\n</code></pre> <ul> <li>Voc\u00ea pode acessar a documenta\u00e7\u00e3o em <code>http://0.0.0.0:8000/docs</code></li> </ul>"},{"location":"#usando-a-api","title":"Usando a API","text":"<ul> <li><code>registrar</code>:</li> </ul> <pre><code>    curl -X POST \\\n    http://0.0.0.0:8000/registrar \\\n    -H 'Content-Type: application/json' \\\n    -d '{\n        \"nome\": \"seu_nome\",\n        \"email\": \"seu_email\",\n        \"senha\": \"sua_senha\"\n    }'\n</code></pre> <ul> <li><code>login</code>:</li> </ul> <pre><code>    curl -X POST \\\n    http://0.0.0.0:8000/login \\\n    -H 'Content-Type: application/json' \\\n    -d '{\n        \"email\": \"seu_email\",\n        \"senha\": \"sua_senha\"\n    }'\n</code></pre> <ul> <li><code>consultar</code>:</li> </ul> <pre><code>    curl -X GET \\\n    http://0.0.0.0:8000/consultar \\\n    -H 'Authorization: Bearer seu_token_jwt_aqui' \\\n    -H 'accept: application/json'\n</code></pre>"}]}