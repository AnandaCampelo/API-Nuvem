{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Projeto de API RESTful com FastAPI","text":""},{"location":"#sumario","title":"Sum\u00e1rio","text":"<ol> <li>Descri\u00e7\u00e3o do Projeto</li> <li>Funcionalidades Implementadas</li> <li>Estrutura do C\u00f3digo</li> <li>Como Executar a Aplica\u00e7\u00e3o</li> <li>Usando a API</li> </ol>"},{"location":"#descricao-do-projeto","title":"Descri\u00e7\u00e3o do Projeto","text":"<p>Este projeto \u00e9 uma API RESTful desenvolvida com FastAPI para realizar o cadastro e autentica\u00e7\u00e3o de usu\u00e1rios e consultar dados meteorol\u00f3gicos da API OpenWeatherMap. A aplica\u00e7\u00e3o \u00e9 composta por diversas funcionalidades, incluindo registro de usu\u00e1rios, autentica\u00e7\u00e3o via JWT (JSON Web Token), e consulta de previs\u00f5es do tempo.</p>"},{"location":"#funcionalidades-implementadas","title":"Funcionalidades Implementadas","text":"<p>1. Registro de Usu\u00e1rios:</p> <ul> <li>Endpoint: <code>POST /registrar</code></li> <li>Recebe dados do usu\u00e1rio como par\u00e2metros:</li> </ul> <pre><code>{\n    \"nome\": \"string\",\n    \"email\": \"string\",\n    \"senha\": \"string\"\n}\n</code></pre> <ul> <li>Verifica se o email j\u00e1 est\u00e1 registrado.</li> <li>Hash da senha utilizando bcrypt.</li> <li>Armazena o novo usu\u00e1rio no banco de dados e retorna um token JWT:</li> </ul> <pre><code>{\n    \"jwt\": \"string\"\n}\n</code></pre> <p>2. Autentica\u00e7\u00e3o de Usu\u00e1rios:</p> <ul> <li>Endpoint: <code>POST /login</code></li> <li>Recebe email e senha do usu\u00e1rio como par\u00e2metros:</li> </ul> <pre><code>{\n    \"email\": \"string\",\n    \"senha\": \"string\"\n}\n</code></pre> <ul> <li>Verifica as credenciais e autentica o usu\u00e1rio.</li> <li>Retorna um token JWT para acesso autorizado:</li> </ul> <pre><code>{\n    \"jwt\": \"string\"\n}\n</code></pre> <p>3. Consulta de Previs\u00e3o do Tempo:</p> <ul> <li>Endpoint: <code>GET /consultar</code></li> <li>Requer um token JWT v\u00e1lido:</li> </ul> <pre><code>    Authorization: Bearer token_de_usu\u00e1rio\n</code></pre> <ul> <li>Faz uma requisi\u00e7\u00e3o \u00e0 API OpenWeatherMap utilizando as coordenadas especificadas.</li> <li>Formata e retorna os dados da previs\u00e3o do tempo:</li> </ul> <pre><code>{\n    \"city\": \"string\",\n    \"country\": \"string\",\n    \"forecast\": {\n        \"time\": \"string\",\n        \"temperature\": \"number\",\n        \"feels_like\": \"number\",\n        \"temp_min\": \"number\",\n        \"temp_max\": \"number\",\n        \"pressure\": \"number\",\n        \"humidity\": \"number\",\n        \"weather\": \"string\",\n        \"weather_icon\": \"string\",\n        \"clouds\": \"number\",\n        \"wind_speed\": \"number\",\n        \"wind_deg\": \"number\",\n        \"visibility\": \"number\",\n        \"pop\": \"number\",\n        \"rain\": \"number\",\n        \"snow\": \"number\"\n    }\n}\n</code></pre>"},{"location":"#estrutura-do-codigo","title":"Estrutura do C\u00f3digo","text":"<p>1. Importa\u00e7\u00f5es e Configura\u00e7\u00f5es:</p> <ul> <li>Carrega vari\u00e1veis de ambiente (chave secreta, URL do banco de dados, chave da API do OpenWeatherMap).</li> <li>Configura a conex\u00e3o com o banco de dados usando SQLAlchemy.</li> </ul> <p>2. Defini\u00e7\u00f5es de Modelos:</p> <ul> <li><code>User</code>: Modelo Pydantic para valida\u00e7\u00e3o de dados de entrada de usu\u00e1rios.</li> <li><code>Login</code>: Modelo Pydantic para valida\u00e7\u00e3o de dados de login.</li> <li><code>UserDB</code>: Modelo SQLAlchemy para representar a tabela de usu\u00e1rios no banco de dados.</li> </ul> <p>3. Fun\u00e7\u00f5es de Utilidade:</p> <ul> <li><code>create_token</code>: Cria um token JWT com dados do usu\u00e1rio e um tempo de expira\u00e7\u00e3o.</li> <li><code>verify_token</code>: Verifica e decodifica um token JWT.</li> <li><code>get_db</code>: Gerencia a sess\u00e3o do banco de dados.</li> </ul> <p>4. Endpoints da API:</p> <ul> <li><code>registrar</code>: Registra um novo usu\u00e1rio.</li> <li><code>login</code>: Autentica um usu\u00e1rio existente.</li> <li><code>consultar</code>: Consulta a previs\u00e3o do tempo ap\u00f3s verificar o token JWT.</li> </ul>"},{"location":"#como-executar-a-aplicacao","title":"Como Executar a Aplica\u00e7\u00e3o","text":"<p>1. Pr\u00e9-requisitos:</p> <ul> <li>Docker</li> </ul> <p>2. Configura\u00e7\u00e3o:</p> <ul> <li>Clone o reposit\u00f3rio:</li> </ul> <pre><code>git clone https://github.com/AnandaCampelo/API-Nuvem.git\ncd API-Nuvem\n</code></pre> <ul> <li>Crie um arquivo <code>.env</code> na raiz do projeto e defina as seguintes vari\u00e1veis:</li> </ul> <pre><code>SECRET_KEY=sua_senha\nDATABASE_URL=postgresql://user:password@db:5432/dbname\nOPENWEATHERMAP_API_KEY=sua_chave_api_openweathermap\nPOSTGRES_USER=user\nPOSTGRES_PASSWORD=password\nPOSTGRES_DB=dbname\n</code></pre> <p>3. Execute a aplica\u00e7\u00e3o com Docker Compose:</p> <ul> <li>O arquivo compose.yml pode ser encontrado <code>aqui</code>.</li> </ul> <pre><code>    docker compose up -d\n</code></pre> <ul> <li>Ap\u00f3s isso voc\u00ea pode acessar a documenta\u00e7\u00e3o em <code>http://0.0.0.0:8000/docs</code></li> </ul>"},{"location":"#usando-a-api","title":"Usando a API","text":"<ul> <li><code>registrar</code>:</li> </ul> <pre><code>    curl -X POST \\\n    http://0.0.0.0:8000/registrar \\\n    -H 'Content-Type: application/json' \\\n    -d '{\n        \"nome\": \"seu_nome\",\n        \"email\": \"seu_email\",\n        \"senha\": \"sua_senha\"\n    }' -w '\\n'\n</code></pre> <ul> <li><code>login</code>:</li> </ul> <pre><code>    curl -X POST \\\n    http://0.0.0.0:8000/login \\\n    -H 'Content-Type: application/json' \\\n    -d '{\n        \"email\": \"seu_email\",\n        \"senha\": \"sua_senha\"\n    }' -w '\\n'\n</code></pre> <ul> <li><code>consultar</code>:</li> </ul> <pre><code>    curl -X GET \\\n    http://0.0.0.0:8000/consultar \\\n    -H 'Authorization: Bearer seu_token_jwt_aqui' \\\n    -H 'accept: application/json' -w '\\n'\n</code></pre>"},{"location":"#video-exemplo","title":"V\u00eddeo Exemplo","text":""},{"location":"#imagens-exemplo","title":"Imagens Exemplo","text":"<ul> <li>Registrar:</li> </ul> <ul> <li>Login:</li> </ul> <ul> <li>Consultar:</li> </ul>"},{"location":"aws/","title":"Guia de Deploy no AWS com EKS","text":"<p>Este guia descreve os passos para configurar e implementar a aplica\u00e7\u00e3o no AWS usando o Elastic Kubernetes Service (EKS).</p> <p>Esses foram os passos feitos para realizar deploy desta API, que est\u00e1 dispon\u00edvel <code>aqui</code>.</p>"},{"location":"aws/#sumario","title":"Sum\u00e1rio","text":"<ol> <li>Pr\u00e9-requisitos</li> <li>Configura\u00e7\u00e3o da AWS CLI</li> <li>Cria\u00e7\u00e3o do Cluster EKS</li> <li>Configura\u00e7\u00e3o do Kubernetes</li> <li>Deploy da Aplica\u00e7\u00e3o e Banco de Dados</li> </ol>"},{"location":"aws/#pre-requisitos","title":"Pr\u00e9-requisitos","text":"<ul> <li>Conta AWS configurada</li> <li>AWS CLI instalado</li> <li>kubectl instalado</li> <li>eksctl instalado</li> </ul>"},{"location":"aws/#configuracao-da-aws-cli","title":"Configura\u00e7\u00e3o da AWS CLI","text":"<p>Rode o comando abaixo e insira as credenciais de usu\u00e1rio:</p> <pre><code>aws configure\n</code></pre> <ul> <li>Access Key ID</li> <li>Secret Access Key</li> <li>Regi\u00e3o que deseja utilizar (i.e: us-east-1)</li> <li>Formato de sa\u00edda padr\u00e3o: JSON</li> </ul>"},{"location":"aws/#criacao-do-cluster-eks","title":"Cria\u00e7\u00e3o do Cluster EKS","text":"<p>Rode o comando abaixo para criar o cluster EKS:</p> <pre><code>eksctl create cluster --name cloud-cluster --nodes 2\n</code></pre> <ul> <li>Este comando cria um cluster EKS com dois n\u00f3s. </li> <li>O processo pode levar v\u00e1rios minutos.</li> </ul>"},{"location":"aws/#configuracao-do-kubernetes","title":"Configura\u00e7\u00e3o do Kubernetes","text":"<p>Rode o comando abaixo para atualizar o kubeconfig para usar o novo cluster:</p> <pre><code>aws eks update-kubeconfig --name cloud-cluster\n</code></pre> <ul> <li>Para verificar os n\u00f3s do cluster:     <code>sh     kubectl get nodes</code></li> </ul>"},{"location":"aws/#deploy-da-aplicacao-e-banco-de-dados","title":"Deploy da Aplica\u00e7\u00e3o e Banco de Dados","text":"<p>1. Crio o arquivo <code>db-deployment.yml</code>:</p> <pre><code>apiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: postgres\nspec:\n  replicas: 1\n  selector:\n    matchLabels:\n      app: postgres\n  template:\n    metadata:\n      labels:\n        app: postgres\n    spec:\n      containers:\n      - name: postgres\n        image: postgres:13\n        env:\n        - name: POSTGRES_USER\n          value: \"user\"\n        - name: POSTGRES_PASSWORD\n          value: \"password\"\n        - name: POSTGRES_DB\n          value: \"dbname\"\n        ports:\n        - containerPort: 5432\n---\napiVersion: v1\nkind: Service\nmetadata:\n  name: postgres\nspec:\n  ports:\n  - port: 5432\n    targetPort: 5432\n  selector:\n    app: postgres\n</code></pre> <p>2. Crie o arquivo <code>app-deployment.yml</code>:</p> <pre><code>apiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: fastapi\nspec:\n  replicas: 1\n  selector:\n    matchLabels:\n      app: fastapi\n  template:\n    metadata:\n      labels:\n        app: fastapi\n    spec:\n      containers:\n      - name: fastapi\n        image: anandajgc/weathercloud:latest\n        ports:\n        - containerPort: 8000\n        env:\n        - name: DATABASE_URL\n          value: \"postgresql://user:password@postgres:5432/dbname\"\n        - name: SECRET_KEY\n          value: \"sua_senha\"\n        - name: OPENWEATHERMAP_API_KEY\n          value: \"seu_token\"\n---\napiVersion: v1\nkind: Service\nmetadata:\n  name: fastapi-service\nspec:\n  type: LoadBalancer\n  ports:\n    - port: 80\n      targetPort: 8000\n  selector:\n    app: fastapi\n</code></pre> <p>3. Aplique os arquivos de deployment:</p> <pre><code>kubectl apply -f db-deployment.yml\nkubectl apply -f app-deployment.yml\n</code></pre> <p>4. Verifique os pods:</p> <pre><code>kubectl get pods\n</code></pre> <pre><code>NAME                        READY   STATUS    RESTARTS   AGE\nfastapi-66dccdb476-rsbfl    1/1     Running   0          5s\npostgres-59898c8667-vww4z   1/1     Running   0          3m8s\n</code></pre> <p>5. Verifique os servi\u00e7os:</p> <pre><code>kubectl get services\n</code></pre> <pre><code>NAME              TYPE           CLUSTER-IP      EXTERNAL-IP                                                               PORT(S)        AGE\nfastapi-service   LoadBalancer   10.100.58.131   aabf021d170204a16a8ff69c689a1cf9-1954537924.us-east-1.elb.amazonaws.com   80:31152/TCP   9s\nkubernetes        ClusterIP      10.100.0.1      &lt;none&gt;                                                                    443/TCP        5h53m\npostgres          ClusterIP      10.100.16.70    &lt;none&gt;                                                                    5432/TCP       3m13s\n</code></pre> <p>Procure pelo <code>EXTERNAL-IP</code> do <code>fastapi-service</code> e acesse a aplica\u00e7\u00e3o no navegador (<code>aqui</code>) ou via curl:</p> <ul> <li><code>registrar</code>:</li> </ul> <pre><code>  curl -X 'POST' \\\n    'http://aabf021d170204a16a8ff69c689a1cf9-1954537924.us-east-1.elb.amazonaws.com/registrar' \\\n    -H 'accept: application/json' \\\n    -H 'Content-Type: application/json' \\\n    -d '{\n    \"nome\": \"string\",\n    \"email\": \"string\",\n    \"senha\": \"string\"\n  }' -w '\\n'\n</code></pre> <ul> <li><code>login</code>:</li> </ul> <pre><code>  curl -X 'POST' \\\n    'http://aabf021d170204a16a8ff69c689a1cf9-1954537924.us-east-1.elb.amazonaws.com/login' \\\n    -H 'accept: application/json' \\\n    -H 'Content-Type: application/json' \\\n    -d '{\n    \"email\": \"string\",\n    \"senha\": \"string\"\n  }' -w '\\n'\n</code></pre> <ul> <li><code>consultar</code>:</li> </ul> <pre><code>  curl -X GET \\\n    http://aabf021d170204a16a8ff69c689a1cf9-1954537924.us-east-1.elb.amazonaws.com/consultar \\\n    -H 'Authorization: Bearer seu_token_jwt_aqui' \\\n    -H 'accept: application/json' -w '\\n'\n</code></pre>"}]}